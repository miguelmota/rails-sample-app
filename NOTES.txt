# Notes

gem install rails -v 3.23

mkdir rails_projects
cd rails_projects
rails new first_app

bundle install

gemfile - specify which gems you want to use
gemfile.lock - specific version of gems installed by bundler, including deps of gems

in gemfile `>=` - install latest version greater than
~> limit to only major version ex. 2.3 - 3.0

rails server
rails s

gem install heroku
heroku keys:add
heroku create --stack cedar
git push heroku master
heroku open

data model - users,microposts

# if rails server fails with openssl errors
rvm get stable
rvm reinstall ruby-1.9.3-p545
rvm gemset pristine
    font-size: 18px;
bundle install
--

rails generate scaffold User name:string email:string
key is auto created

bundle exec rake db:migrate # updates db with new scaffold
# use bundle exec to make sure rake version is same as in Gemfile

rake is ruby make - little tasks

bundle exec rake -T # view tasks
bundle exec rake -T db

# inheritance using <
class UsersController < ApplicationController

GET /users index # page
GET /users/1 show # page
GET /users/new new # page
POST /users create # action
GET /users/1/edit edit # page
PUT /users/1 update # action
DELETE /users/1 destroy # action

REST - resources that you can perform CRUD ops on

User.all # ask model -> db for all

variables with @ are instance variables, available in views

scaffold creates resource in config/routes.rb

# add validators in model
class Micropost < ActiveRecord::Base
  validates :content, :length => { :maximum => 140 }
end

rails console
first_user = User.first
first_user.microposts
exit

heroku run rake db:migrate

rails new app --skip-test-unit
gem 'rspec-rails'

rails generate rspec:install

rails generate controller StaticPages home help --no-test-framework
rails destroy controller StaticPages home help

rails destroy model Foo

rake db:migrate
rake db:rollback # undo migrate
arke db:migrate VERSION=0 # go all the way back to beggining

rails generate integration_test static_pages

99.times do |n|
end

bundle exec rspec spec/requests/static_pages_spec.rb

# cmds such as rake and spec excute in the right environment. avoid "bundle exec"
rvm get head && rvm reload
chmod +x /Users/moogs/.rvm/hooks/after_cd_bundler

bundle install --without production --binstubs=./bundler_stubs
bundle install --binstubs=./bundler_stubs # after adding another executable

bunlde --binstubs

bin/rspec spec/
bin/rake

# watch
bundle exec guard init rspec
bundle exec guard
edit Guardfile for directories

# load evironment only once
bundle exec spork --bootstrap

# timing test suite
time bundle exec rspec spec/requests/static_pages_spec.rb

bundle exec spork

https://github.com/sporkrb/spork/issues/223

# Chapter 4

rails console
rails c

# log
puts "foo"
"puts if not empty" if x.empty?
nil.to_s.empty?
nil.nil?
in ruby everything is true, even 0,  except nil and false
arr = "ab".split('')
arr[0]
arr[-1]
arr.first | second | last | shuffle | sort | reverse
use bang (!) to mutate arr.shuffle!
arr.push('a')
arr << "foo" << "bar" # chain pushes
arr.join
(0..12).to_a
('a'..'e').to_a
%w[foo bar] # ["foo", "bar"]
# block
(1..5).each {|i| puts 2 * i}
|i| is a block variable
# alt way
(1..5).each do |i|
  puts 2 * i
end
3.times
(1..5).map { |i| i**2 } # ** = power
d = %w[A B].map {|c| c.downcase } # upcase
('a'..'z').to_a[0..2]
# hashes, => is a hashrocket
user = {}
user['first_name'] = "bob"
user = { "first_name" => "dog", "last_name" => "woof" }
user = { :first_name => "dog" } # using symbol for key
user[:first_name]
p user # shortand for print
user = { first_name: "dog" } # shorthand for keys
hashes can be nested
flash = {success: "it worked", error: "it failed"}
flash.each do |key, value|
  puts "#{key.inspect}, #{value.inspect}" # inspect returns a string literal representation
end
''.class # String
s = String.new('foobar')
Array.new([])
h = Hash.new(0) # default values will be 0
''.class.superclass # Object

# Classes
class Word < String
  def palindrome?
    self == self.reverse
  end
end

s = Word.new('level')
s.palindrome?

"   ".blank? # true
nil.blank? # true

# call controller methods
controller = StaticPagesController.new

attr_accessor :name, :email # creates getters and setters"
@name = 'foo' # instance var of attr_accessor
#{@foo}
controller.home

require './some_file'

/app/assets/stylesheets/application.css # contains manifest for Sprockets gem to compile
/vendor/assets/stylesheets
/lib/assets

foobar.js.erb.coffee # runs from right to left

# config/routes.rb
root to: 'static_pages#home', :via => [:get, :post]
match '/help', to: 'static_pages#help', :via => [:get, :post]

rails generate controller Users new --no-test-framework

rails generate integration_test user_pages

Active Record is library for interacting with database
migrations to allow data definition to be written in pure ruby

rails generate model user name:string email:string
db/migrate/

bundle exec rake db:migrate
bundle exec rake db:rollback

# Display table models as comments
bundle exec annotate --position before

rails console --sandbox
user = User.new(name: "Michael", email: "mhartl@example.com")
user.save
User.create() # in step
user.destory
User.find(1)
User.find_by_email('email@mail.com')
User.first
User.all
user.email = 'come@me.bro'
user.reload.email # creates a new instance before saved
      @user.email = mixed_case_email # imagine before method to downcase
      @user.save
      @user.reload.email.should == mixed_case_email.downcase
user.email # 'mhartl@example.com'
user.update_attributes(name: 'dude') # only attr_accessor attributes can be updatedo

bin/rake db:migrate RAILS_ENV=test
bundle exec rspec spec/models/user_spec.rb

something.respond_to? # return true if has method or property

# test db with correct structure
bundle exec rake db:test:prepare

user.valid? # validation
user.errors.full_messages

ruby constants (can't be changed) are all caps

rails generate migration add_index_to_users_email
rails generate migration add_password_digest_to_users password_digest:string

 user.errors.full_messages

 rails console
 Rails.env
 Rails.env.development?

 rails server --environment production
 bundle exec rake db:migrate RAILS_ENV=production

user.update_attributes(name: 'miguel')

bundle exec rake db:reset
bundle exec rake db:test:prepare

User.count

bundle exec rspec spec/requests/user_pages_spec.rb -e "signup page" # -e runs whose description matches

rails generate integration_test authentication_pages

rails generate migration add_remember_token_to_users

1.years.from_now

User.new.new_record? # true
User.first.new_record? # false

@user.toggle! # toggles

#p414
rails generate migration add_admin_to_users admin:boolean

# deploy
heroku addons
heroku pg:reset HEROKU_POSTGRESQL_PINK --confirm protected-beyond-8069
heroku run rake db:migrate
heroku run rake db:populate

rails generate model Micropost content:string user_id:integer
all accessible by default

# relationships
micropost.user
user.microposts
user.microposts.create(arg)
user.microposts.create!(arg) # throw exception
user.microsposts.build(arg) # return new microspost object

<%= render @micropost %> renders _micropost.html.erb

tail -f log/development.log

spec/requests contains integration tests

a = [1,"foo", :bar]
a.include?("foo") # true

rails generate model Relationship follower_id:integer followed_id:integer